name: CI for Selenium-Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # browser: [chrome, firefox]
        browser: [chrome]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install browsers and drivers
        run: |
          sudo apt-get update
          sudo apt-get install -y jq xvfb libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxtst6
          if [ "${{ matrix.browser }}" = "chrome" ]; then
            sudo apt-get install -y google-chrome-stable
          elif [ "${{ matrix.browser }}" = "firefox" ]; then
            # Install Firefox
            sudo apt-get install -y firefox
            # Install latest geckodriver
            GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.tag_name')
            wget https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz
            tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz
            sudo mv geckodriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/geckodriver
            # Verify installations
            geckodriver --version
            firefox --version
          fi

      - name: Install Java and Allure Commandline
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl openjdk-11-jre-headless
          curl -L -o /tmp/allure.zip https://github.com/allure-framework/allure2/releases/download/2.35.1/allure-2.35.1.zip
          sudo unzip -q /tmp/allure.zip -d /tmp
          sudo rm -rf /usr/local/allure
          sudo mv /tmp/allure-2.35.1 /usr/local/allure
          sudo chmod -R +x /usr/local/allure/bin
          sudo ln -sf /usr/local/allure/bin/allure /usr/local/bin/allure
          allure --version

      - name: Create .env file
        run: |
          echo "BASE_URL=https://the-internet.herokuapp.com/" > .env
          echo "BROWSER=${{ matrix.browser }}" >> .env
          echo "SHORT_TIMEOUT=15" >> .env
          echo "LONG_TIMEOUT=45" >> .env
          echo "VIDEO_RECORDING=True" >> .env
          echo "HEADLESS=True" >> .env
          echo "MAXIMIZED=False" >> .env
          echo "USERNAME=${{ secrets.TEST_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.TEST_PASSWORD }}" >> .env

      - name: Check website availability
        run: |
          curl -s -f https://the-internet.herokuapp.com/ || exit 1

      - name: Run Pytest with Allure
        run: |
          PYTHONUNBUFFERED=1 xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" \
            pytest tests/ -v -n auto --dist=loadfile --html=reports/report.html --self-contained-html \
            --alluredir=reports/allure-results

      - name: Generate Allure report
        if: always()
        run: allure generate reports/allure-results --clean -o reports/allure-report

      - name: Deploy Allure Report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: reports/allure-report
          destination_dir: allure-report/build-${{ github.run_id }}
          keep_files: false  # Overwrite existing files

      - name: Clean old Allure Reports
        if: github.ref == 'refs/heads/main'
        run: |
          # Clean untracked files to avoid checkout conflicts
          git clean -fdx
          # Fetch the gh-pages branch to ensure it's available
          git fetch origin gh-pages:gh-pages || echo "No existing gh-pages branch"
          git checkout gh-pages || git checkout -b gh-pages
          # Remove old build folders (keep the latest one)
          [ -d allure-report ] && find allure-report -maxdepth 1 -type d -name 'build-*' -not -name "build-${{ github.run_id }}" -exec rm -rf {} + || echo "No allure-report directory"
          # Remove 'reports/' if it exists (legacy)
          rm -rf reports 2>/dev/null || true
          git add .
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Clean old Allure reports" || echo "No changes to commit"
          git push origin gh-pages || echo "No changes to push"

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ github.run_id }}
          path: reports/allure-results/

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.browser }}-${{ github.run_id }}
          path: reports/allure-report/

      - name: Upload Videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos-${{ matrix.browser }}-${{ github.run_id }}
          path: tests_recordings/

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots-${{ matrix.browser }}-${{ github.run_id }}
          path: tests_screenshots/